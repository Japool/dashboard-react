import { createSlice } from "@reduxjs/toolkit";
import { RootState } from "../../app/store";

export interface ClickScreen {
  chat: boolean;
  cart: boolean;
  userProfile: boolean;
  notification: boolean;
}
export interface ThemeState {
  mode: string;
  color: string;
  screenSize: string | number;
  currentColor: string;
  currentMode: string;
  themeSettings: Boolean;
  activeMenu: boolean;
  isClicked: ClickScreen;
}
const initialState: ThemeState = {
  mode: "",
  color: "",
  screenSize: "undefined",
  currentColor: "theme-color-blue",
  currentMode: "theme-mode-light",
  themeSettings: false,
  activeMenu: true,
  isClicked: {
    chat: false,
    cart: false,
    userProfile: false,
    notification: false,
  },
};

export const themeSlice = createSlice({
  name: "theme",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setMode: (state, action) => {
      state.mode = action.payload;
      state.currentMode = action.payload;
      localStorage.setItem("themeMode", action.payload);
    },
    setColor: (state, action) => {
      state.color = action.payload;
      state.currentColor = action.payload;
      localStorage.setItem("colorMode", action.payload);
    },
    setActiveMenu: (state, action) => {
      state.activeMenu = action.payload;
    },
    setThemeSettings: (state, action) => {
      state.themeSettings = action.payload;
    },
    setScreenSize: (state, action) => {
      state.screenSize = action.payload;
    },
    setIsClicked: (state, action) => {
      state.isClicked = { ...state.isClicked, [action.payload]: true };
    },
    setIsClickClose: (state, action) => {
      state.isClicked = { ...state.isClicked, [action.payload]: false };
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: () => {},
});

export const {
  setMode,
  setColor,
  setIsClicked,
  setIsClickClose,
  setScreenSize,
  setThemeSettings,
  setActiveMenu,
} = themeSlice.actions;
export const themeSelector = (state: RootState) => state.theme;
export default themeSlice.reducer;
