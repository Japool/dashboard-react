import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import axios from "axios";
import { RootState } from "../../app/store";
import { urlAcceso } from "../../utils/endpoints";
import {
  claim,
  credencialesUsuario,
  respuestaAutenticacion,
} from "../../interfaces/auth.model";
import {
  guardarTokenLocalStorage,
  logout,
  obtenerClaims,
} from "./manejadorJWT";

export interface LoginState {
  nombre: string;
  usuario: string | undefined;
  email: string;
  clave: string | undefined;
  usuarioId: string | null;
  autenticado: boolean;
  checking: boolean;
  isFetching: boolean;
  isSuccess: boolean;
  isError: boolean;
  errorMessage: string[];
  claims: claim[];
}
const initialState: LoginState = {
  usuario: "",
  nombre: "",
  clave: "",
  usuarioId: "",
  email: "",
  checking: true,
  autenticado: false,
  isFetching: false,
  isSuccess: false,
  isError: false,
  errorMessage: [],
  claims: [],
};

export const loginUser = createAsyncThunk(
  "auth/login",
  async (credenciales: credencialesUsuario, thunkAPI) => {
    try {
      const response = await axios.post<respuestaAutenticacion>(
        `${urlAcceso}/login`,
        credenciales
      );
      //const {data,status} = response;
      console.log("response", response);
      if (response.status === 200) {
        localStorage.setItem("token", response.data.token);
        guardarTokenLocalStorage(response.data);
        const valores = obtenerClaims();
        console.log(valores);
        return valores;
      } else {
        return thunkAPI.rejectWithValue(response.data);
      }
    } catch (e: any) {
      console.log("Error", e.response.data);
      thunkAPI.rejectWithValue(e.response.data);
    }
  }
);

export const authSlice = createSlice({
  name: "auth",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    clearState: (state) => {
      state.isError = false;
      state.isSuccess = false;
      state.isFetching = false;

      return state;
    },
    authLogout: (state) => {
      logout();
      state.usuario = "";
      state.email = "";
      state.autenticado = false;
      state.isFetching = false;
      state.isSuccess = false;
      state.isError = false;
      state.errorMessage = [];
    },
    verificarLogin: (state) => {
      const claims = obtenerClaims();
      state.claims = claims;
      //console.log(claims);
      if (claims.length > 0) {
        state.usuario = claims.filter((x) => x.nombre === "usuario")[0]?.valor;
        state.clave = claims.filter((x) => x.nombre === "clave")[0]?.valor;
        state.usuarioId = claims.filter(
          (x) => x.nombre === "id_usuario"
        )[0]?.valor;
        state.nombre = claims.filter((x) => x.nombre === "nombre")[0]?.valor;
        state.autenticado = true;
        state.checking = false;
        //console.log(state);
      }
      state.checking = false;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(loginUser.pending, (state) => {
        state.isFetching = true;
      })
      .addCase(loginUser.fulfilled, (state, action) => {
        //state.email = action.payload.email;
        state.usuario = action.payload?.filter(
          (x) => x.nombre === "usuario"
        )[0]?.valor;
        state.clave = action.payload?.filter(
          (x) => x.nombre === "clave"
        )[0]?.valor;
        state.isFetching = false;
        state.isSuccess = true;
        return state;
      })
      .addCase(loginUser.rejected, (state, action) => {
        console.log("payload", action.payload);
        state.isFetching = false;
        state.isError = true;
        state.errorMessage = ["Error al procesar"];
      });
  },
});

//export const userSelector = (state:any) => state.auth
export const { clearState, verificarLogin, authLogout } = authSlice.actions;
export const userSelector = (state: RootState) => state.auth;
export default authSlice.reducer;
